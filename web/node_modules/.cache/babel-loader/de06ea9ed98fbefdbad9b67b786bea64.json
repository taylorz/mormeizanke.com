{"ast":null,"code":"\"use strict\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar assign = require('object-assign');\n\nvar _require = require('@sanity/observable/operators/filter'),\n    filter = _require.filter;\n\nvar _require2 = require('@sanity/observable/operators/map'),\n    map = _require2.map;\n\nvar validators = require('../validators');\n\nvar getSelection = require('../util/getSelection');\n\nvar encodeQueryString = require('./encodeQueryString');\n\nvar Transaction = require('./transaction');\n\nvar Patch = require('./patch');\n\nvar listen = require('./listen');\n\nvar excludeFalsey = function excludeFalsey(param, defValue) {\n  var value = typeof param === 'undefined' ? defValue : param;\n  return param === false ? undefined : value;\n};\n\nvar getMutationQuery = function getMutationQuery() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    returnIds: true,\n    returnDocuments: excludeFalsey(options.returnDocuments, true),\n    visibility: options.visibility || 'sync'\n  };\n};\n\nvar isResponse = function isResponse(event) {\n  return event.type === 'response';\n};\n\nvar getBody = function getBody(event) {\n  return event.body;\n};\n\nvar indexBy = function indexBy(docs, attr) {\n  return docs.reduce(function (indexed, doc) {\n    indexed[attr(doc)] = doc;\n    return indexed;\n  }, Object.create(null));\n};\n\nvar toPromise = function toPromise(observable) {\n  return observable.toPromise();\n};\n\nvar getQuerySizeLimit = 11264;\nmodule.exports = {\n  listen: listen,\n  getDataUrl: function getDataUrl(operation, path) {\n    var config = this.clientConfig;\n    var catalog = config.gradientMode ? config.namespace : validators.hasDataset(config);\n    var baseUri = \"/\".concat(operation, \"/\").concat(catalog);\n    var uri = path ? \"\".concat(baseUri, \"/\").concat(path) : baseUri;\n    return (this.clientConfig.gradientMode ? uri : \"/data\".concat(uri)).replace(/\\/($|\\?)/, '$1');\n  },\n  fetch: function fetch(query, params) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var mapResponse = options.filterResponse === false ? function (res) {\n      return res;\n    } : function (res) {\n      return res.result;\n    };\n\n    var observable = this._dataRequest('query', {\n      query: query,\n      params: params\n    }, options).pipe(map(mapResponse));\n\n    return this.isPromiseAPI() ? toPromise(observable) : observable;\n  },\n  getDocument: function getDocument(id) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = {\n      uri: this.getDataUrl('doc', id),\n      json: true,\n      tag: opts.tag\n    };\n\n    var observable = this._requestObservable(options).pipe(filter(isResponse), map(function (event) {\n      return event.body.documents && event.body.documents[0];\n    }));\n\n    return this.isPromiseAPI() ? toPromise(observable) : observable;\n  },\n  getDocuments: function getDocuments(ids) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = {\n      uri: this.getDataUrl('doc', ids.join(',')),\n      json: true,\n      tag: opts.tag\n    };\n\n    var observable = this._requestObservable(options).pipe(filter(isResponse), map(function (event) {\n      var indexed = indexBy(event.body.documents || [], function (doc) {\n        return doc._id;\n      });\n      return ids.map(function (id) {\n        return indexed[id] || null;\n      });\n    }));\n\n    return this.isPromiseAPI() ? toPromise(observable) : observable;\n  },\n  create: function create(doc, options) {\n    return this._create(doc, 'create', options);\n  },\n  createIfNotExists: function createIfNotExists(doc, options) {\n    validators.requireDocumentId('createIfNotExists', doc);\n    return this._create(doc, 'createIfNotExists', options);\n  },\n  createOrReplace: function createOrReplace(doc, options) {\n    validators.requireDocumentId('createOrReplace', doc);\n    return this._create(doc, 'createOrReplace', options);\n  },\n  patch: function patch(selector, operations) {\n    return new Patch(selector, operations, this);\n  },\n  delete: function _delete(selection, options) {\n    return this.dataRequest('mutate', {\n      mutations: [{\n        delete: getSelection(selection)\n      }]\n    }, options);\n  },\n  mutate: function mutate(mutations, options) {\n    var mut = mutations instanceof Patch || mutations instanceof Transaction ? mutations.serialize() : mutations;\n    var muts = Array.isArray(mut) ? mut : [mut];\n    var transactionId = options && options.transactionId;\n    return this.dataRequest('mutate', {\n      mutations: muts,\n      transactionId: transactionId\n    }, options);\n  },\n  transaction: function transaction(operations) {\n    return new Transaction(operations, this);\n  },\n  dataRequest: function dataRequest(endpoint, body) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var request = this._dataRequest(endpoint, body, options);\n\n    return this.isPromiseAPI() ? toPromise(request) : request;\n  },\n  _dataRequest: function _dataRequest(endpoint, body) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var isMutation = endpoint === 'mutate';\n    var isQuery = endpoint === 'query'; // Check if the query string is within a configured threshold,\n    // in which case we can use GET. Otherwise, use POST.\n\n    var strQuery = !isMutation && encodeQueryString(body);\n    var useGet = !isMutation && strQuery.length < getQuerySizeLimit;\n    var stringQuery = useGet ? strQuery : '';\n    var returnFirst = options.returnFirst;\n    var timeout = options.timeout,\n        token = options.token,\n        tag = options.tag;\n    var uri = this.getDataUrl(endpoint, stringQuery);\n    var reqOptions = {\n      method: useGet ? 'GET' : 'POST',\n      uri: uri,\n      json: true,\n      body: useGet ? undefined : body,\n      query: isMutation && getMutationQuery(options),\n      timeout: timeout,\n      token: token,\n      tag: tag,\n      canUseCdn: isQuery\n    };\n    return this._requestObservable(reqOptions).pipe(filter(isResponse), map(getBody), map(function (res) {\n      if (!isMutation) {\n        return res;\n      } // Should we return documents?\n\n\n      var results = res.results || [];\n\n      if (options.returnDocuments) {\n        return returnFirst ? results[0] && results[0].document : results.map(function (mut) {\n          return mut.document;\n        });\n      } // Return a reduced subset\n\n\n      var key = returnFirst ? 'documentId' : 'documentIds';\n      var ids = returnFirst ? results[0] && results[0].id : results.map(function (mut) {\n        return mut.id;\n      });\n      return _defineProperty({\n        transactionId: res.transactionId,\n        results: results\n      }, key, ids);\n    }));\n  },\n  _create: function _create(doc, op) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var mutation = _defineProperty({}, op, doc);\n\n    var opts = assign({\n      returnFirst: true,\n      returnDocuments: true\n    }, options);\n    return this.dataRequest('mutate', {\n      mutations: [mutation]\n    }, opts);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}