{"ast":null,"code":"import _slicedToArray from \"/Users/taylorzanke/Documents/code/office/mormeizanke.com/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\nconst area = 48;\nexport const Burger = ({\n  color = 'currentColor',\n  direction = 'left',\n  distance = 'md',\n  duration = 0.4,\n  easing = 'cubic-bezier(0, 0, 0, 1)',\n  hideOutline = true,\n  label,\n  onToggle,\n  render,\n  rounded = false,\n  size = 32,\n  toggle,\n  toggled,\n  _lines = 3\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        toggledInternal = _useState2[0],\n        toggleInternal = _useState2[1];\n\n  const width = Math.max(12, Math.min(area, size));\n  const room = Math.round((area - width) / 2);\n  const barHeightRaw = width / 12;\n  const barHeight = Math.round(barHeightRaw);\n  const space = distance === 'lg' ? 0.25 : distance === 'sm' ? 0.75 : 0.5;\n  const marginRaw = width / (_lines * (space + (_lines === 3 ? 1 : 1.25)));\n  const margin = Math.round(marginRaw);\n  const height = barHeight * _lines + margin * (_lines - 1);\n  const topOffset = Math.round((area - height) / 2);\n  const translate = _lines === 3 ? distance === 'lg' ? 4.0425 : distance === 'sm' ? 5.1625 : 4.6325 : distance === 'lg' ? 6.7875 : distance === 'sm' ? 8.4875 : 7.6675;\n  const deviation = (barHeightRaw - barHeight + (marginRaw - margin)) / (_lines === 3 ? 1 : 2);\n  const move = parseFloat((width / translate - deviation / (4 / 3)).toFixed(2));\n  const time = Math.max(0, duration);\n  const burgerStyles = {\n    cursor: 'pointer',\n    height: \"\".concat(area, \"px\"),\n    position: 'relative',\n    transition: \"\".concat(time, \"s \").concat(easing),\n    userSelect: 'none',\n    width: \"\".concat(area, \"px\")\n  };\n  const barStyles = {\n    background: color,\n    height: \"\".concat(barHeight, \"px\"),\n    left: \"\".concat(room, \"px\"),\n    position: 'absolute',\n    width: \"\".concat(width, \"px\")\n  };\n\n  if (hideOutline) {\n    burgerStyles['outline'] = 'none';\n  }\n\n  if (rounded) {\n    barStyles['borderRadius'] = '9em';\n  }\n\n  const isExternal = typeof toggle === 'function' && typeof toggled === 'boolean';\n  const isInternal = typeof toggle !== 'function' && typeof toggled !== 'boolean';\n  const toggleFunction = isExternal ? toggle : isInternal ? toggleInternal : undefined;\n  const toggleCallback = typeof onToggle === 'function' && (isExternal || isInternal) ? onToggle : undefined;\n  const isToggled = typeof toggled === 'boolean' ? toggled : toggledInternal;\n\n  const handler = () => {\n    if (toggleCallback) {\n      toggleCallback(!isToggled);\n    }\n\n    if (toggleFunction) {\n      toggleFunction(!isToggled);\n    }\n  };\n\n  return render({\n    barHeight,\n    barStyles,\n    burgerStyles,\n    easing,\n    handler,\n    isLeft: direction === 'left',\n    isToggled,\n    label,\n    margin,\n    move,\n    time,\n    topOffset\n  });\n};","map":null,"metadata":{},"sourceType":"module"}