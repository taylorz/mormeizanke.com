{"ast":null,"code":"/*\n * EventSource polyfill\n * Originally published by sc AmvTek srl (https://github.com/amvtek/EventSource) - devel@amvtek.com\n * Forked by Espen Hovlandsdal to fix a few issues + publish latest version\n */\n;\n\n(function (root, factory) {\n  /* global define */\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    if (global.EventSource && !global._eventSourceImportPrefix) {\n      return;\n    }\n\n    var evsImportName = (root._eventSourceImportPrefix || '') + 'EventSource';\n    root[evsImportName] = factory();\n  }\n})(typeof self === 'undefined' ? this : self, function () {\n  var EventSource = function (url, options) {\n    if (!url || typeof url != 'string') {\n      throw new SyntaxError('Not enough arguments');\n    }\n\n    this.URL = url;\n    this.setOptions(options);\n    var evs = this;\n    setTimeout(function () {\n      evs.poll();\n    }, 0);\n  };\n\n  EventSource.prototype = {\n    CONNECTING: 0,\n    OPEN: 1,\n    CLOSED: 2,\n    defaultOptions: {\n      loggingEnabled: false,\n      loggingPrefix: 'eventsource',\n      interval: 500,\n      // milliseconds\n      bufferSizeLimit: 256 * 1024,\n      // bytes\n      silentTimeout: 300000,\n      // milliseconds\n      getArgs: {\n        evs_buffer_size_limit: 256 * 1024\n      },\n      xhrHeaders: {\n        Accept: 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    },\n    setOptions: function (options) {\n      var defaults = this.defaultOptions;\n      var option; // set all default options...\n\n      for (option in defaults) {\n        if (defaults.hasOwnProperty(option)) {\n          this[option] = defaults[option];\n        }\n      } // override with what is in options\n\n\n      for (option in options) {\n        if (option in defaults && options.hasOwnProperty(option)) {\n          this[option] = options[option];\n        }\n      } // if getArgs option is enabled\n      // ensure evs_buffer_size_limit corresponds to bufferSizeLimit\n\n\n      if (this.getArgs && this.bufferSizeLimit) {\n        this.getArgs.evs_buffer_size_limit = this.bufferSizeLimit;\n      } // if console is not available, force loggingEnabled to false\n      // eslint-disable-next-line no-console\n\n\n      if (typeof console === 'undefined' || typeof console.log === 'undefined') {\n        this.loggingEnabled = false;\n      }\n    },\n    log: function (message) {\n      if (this.loggingEnabled) {\n        // eslint-disable-next-line no-console\n        console.log('[' + this.loggingPrefix + ']:' + message);\n      }\n    },\n    poll: function () {\n      try {\n        if (this.readyState == this.CLOSED) {\n          return;\n        }\n\n        this.cleanup();\n        this.readyState = this.CONNECTING;\n        this.cursor = 0;\n        this.cache = '';\n        this._xhr = new this.XHR(this);\n        this.resetNoActivityTimer();\n      } catch (err) {\n        // in an attempt to silence the errors\n        this.log('There were errors inside the pool try-catch');\n        this.dispatchEvent('error', {\n          type: 'error',\n          data: err.message\n        });\n      }\n    },\n    pollAgain: function (interval) {\n      // schedule poll to be called after interval milliseconds\n      var evs = this;\n      evs.readyState = evs.CONNECTING;\n      evs.dispatchEvent('error', {\n        type: 'error',\n        data: 'Reconnecting '\n      });\n      this._pollTimer = setTimeout(function () {\n        evs.poll();\n      }, interval || 0);\n    },\n    cleanup: function () {\n      this.log('evs cleaning up');\n\n      if (this._pollTimer) {\n        clearInterval(this._pollTimer);\n        this._pollTimer = null;\n      }\n\n      if (this._noActivityTimer) {\n        clearInterval(this._noActivityTimer);\n        this._noActivityTimer = null;\n      }\n\n      if (this._xhr) {\n        this._xhr.abort();\n\n        this._xhr = null;\n      }\n    },\n    resetNoActivityTimer: function () {\n      if (this.silentTimeout) {\n        if (this._noActivityTimer) {\n          clearInterval(this._noActivityTimer);\n        }\n\n        var evs = this;\n        this._noActivityTimer = setTimeout(function () {\n          evs.log('Timeout! silentTImeout:' + evs.silentTimeout);\n          evs.pollAgain();\n        }, this.silentTimeout);\n      }\n    },\n    close: function () {\n      this.readyState = this.CLOSED;\n      this.log('Closing connection. readyState: ' + this.readyState);\n      this.cleanup();\n    },\n    _onxhrdata: function () {\n      var request = this._xhr;\n\n      if (request.isReady() && !request.hasError()) {\n        // reset the timer, as we have activity\n        this.resetNoActivityTimer(); // move this EventSource to OPEN state...\n\n        if (this.readyState == this.CONNECTING) {\n          this.readyState = this.OPEN;\n          this.dispatchEvent('open', {\n            type: 'open'\n          });\n        }\n\n        var buffer = request.getBuffer();\n\n        if (buffer.length > this.bufferSizeLimit) {\n          this.log('buffer.length > this.bufferSizeLimit');\n          this.pollAgain();\n        }\n\n        if (this.cursor == 0 && buffer.length > 0) {\n          // skip byte order mark \\uFEFF character if it starts the stream\n          if (buffer.substring(0, 1) == '\\uFEFF') {\n            this.cursor = 1;\n          }\n        }\n\n        var lastMessageIndex = this.lastMessageIndex(buffer);\n\n        if (lastMessageIndex[0] >= this.cursor) {\n          var newcursor = lastMessageIndex[1];\n          var toparse = buffer.substring(this.cursor, newcursor);\n          this.parseStream(toparse);\n          this.cursor = newcursor;\n        } // if request is finished, reopen the connection\n\n\n        if (request.isDone()) {\n          this.log('request.isDone(). reopening the connection');\n          this.pollAgain(this.interval);\n        }\n      } else if (this.readyState !== this.CLOSED) {\n        this.log('this.readyState !== this.CLOSED');\n        this.pollAgain(this.interval); //MV: Unsure why an error was previously dispatched\n      }\n    },\n    parseStream: function (chunk) {\n      // normalize line separators (\\r\\n,\\r,\\n) to \\n\n      // remove white spaces that may precede \\n\n      chunk = this.cache + this.normalizeToLF(chunk);\n      var events = chunk.split('\\n\\n');\n      var i, j, eventType, datas, line, retry;\n\n      for (i = 0; i < events.length - 1; i++) {\n        eventType = 'message';\n        datas = [];\n        var parts = events[i].split('\\n');\n\n        for (j = 0; j < parts.length; j++) {\n          line = this.trimWhiteSpace(parts[j]);\n\n          if (line.indexOf('event') == 0) {\n            eventType = line.replace(/event:?\\s*/, '');\n          } else if (line.indexOf('retry') == 0) {\n            retry = parseInt(line.replace(/retry:?\\s*/, ''), 10);\n\n            if (!isNaN(retry)) {\n              this.interval = retry;\n            }\n          } else if (line.indexOf('data') == 0) {\n            datas.push(line.replace(/data:?\\s*/, ''));\n          } else if (line.indexOf('id:') == 0) {\n            this.lastEventId = line.replace(/id:?\\s*/, '');\n          } else if (line.indexOf('id') == 0) {\n            // this resets the id\n            this.lastEventId = null;\n          }\n        }\n\n        if (datas.length && this.readyState != this.CLOSED) {\n          // dispatch a new event\n          var event = new MessageEvent(eventType, datas.join('\\n'), typeof window !== 'undefined' && typeof window.location !== 'undefined' ? window.location.origin : null, this.lastEventId);\n          this.dispatchEvent(eventType, event);\n        }\n      }\n\n      this.cache = events[events.length - 1];\n    },\n    dispatchEvent: function (type, event) {\n      var handlers = this['_' + type + 'Handlers'];\n\n      if (handlers) {\n        for (var i = 0; i < handlers.length; i++) {\n          handlers[i].call(this, event);\n        }\n      }\n\n      if (this['on' + type]) {\n        this['on' + type].call(this, event);\n      }\n    },\n    addEventListener: function (type, handler) {\n      if (!this['_' + type + 'Handlers']) {\n        this['_' + type + 'Handlers'] = [];\n      }\n\n      this['_' + type + 'Handlers'].push(handler);\n    },\n    removeEventListener: function (type, handler) {\n      var handlers = this['_' + type + 'Handlers'];\n\n      if (!handlers) {\n        return;\n      }\n\n      for (var i = handlers.length - 1; i >= 0; --i) {\n        if (handlers[i] === handler) {\n          handlers.splice(i, 1);\n          break;\n        }\n      }\n    },\n    _pollTimer: null,\n    _noactivityTimer: null,\n    _xhr: null,\n    lastEventId: null,\n    cache: '',\n    cursor: 0,\n    onerror: null,\n    onmessage: null,\n    onopen: null,\n    readyState: 0,\n    // ===================================================================\n    // helpers functions\n    // those are attached to prototype to ease reuse and testing...\n    urlWithParams: function (baseURL, params) {\n      var encodedArgs = [];\n\n      if (params) {\n        var key, urlarg;\n        var urlize = encodeURIComponent;\n\n        for (key in params) {\n          if (params.hasOwnProperty(key)) {\n            urlarg = urlize(key) + '=' + urlize(params[key]);\n            encodedArgs.push(urlarg);\n          }\n        }\n      }\n\n      if (encodedArgs.length > 0) {\n        if (baseURL.indexOf('?') == -1) return baseURL + '?' + encodedArgs.join('&');\n        return baseURL + '&' + encodedArgs.join('&');\n      }\n\n      return baseURL;\n    },\n    lastMessageIndex: function (text) {\n      var ln2 = text.lastIndexOf('\\n\\n');\n      var lr2 = text.lastIndexOf('\\r\\r');\n      var lrln2 = text.lastIndexOf('\\r\\n\\r\\n');\n\n      if (lrln2 > Math.max(ln2, lr2)) {\n        return [lrln2, lrln2 + 4];\n      }\n\n      return [Math.max(ln2, lr2), Math.max(ln2, lr2) + 2];\n    },\n    trimWhiteSpace: function (str) {\n      // to remove whitespaces left and right of string\n      var reTrim = /^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g;\n      return str.replace(reTrim, '');\n    },\n    normalizeToLF: function (str) {\n      // replace \\r and \\r\\n with \\n\n      return str.replace(/\\r\\n|\\r/g, '\\n');\n    }\n  };\n\n  if (isOldIE()) {\n    EventSource.isPolyfill = 'IE_8-9'; // patch EventSource defaultOptions\n\n    var defaults = EventSource.prototype.defaultOptions;\n    defaults.xhrHeaders = null; // no headers will be sent\n\n    defaults.getArgs.evs_preamble = 2048 + 8; // EventSource will send request using Internet Explorer XDomainRequest\n\n    EventSource.prototype.XHR = function (evs) {\n      /* global XDomainRequest */\n      var request = new XDomainRequest();\n      this._request = request; // set handlers\n\n      request.onprogress = function () {\n        request._ready = true;\n\n        evs._onxhrdata();\n      };\n\n      request.onload = function () {\n        this._loaded = true;\n\n        evs._onxhrdata();\n      };\n\n      request.onerror = function () {\n        this._failed = true;\n        evs.readyState = evs.CLOSED;\n        evs.dispatchEvent('error', {\n          type: 'error',\n          data: 'XDomainRequest error'\n        });\n      };\n\n      request.ontimeout = function () {\n        this._failed = true;\n        evs.readyState = evs.CLOSED;\n        evs.dispatchEvent('error', {\n          type: 'error',\n          data: 'XDomainRequest timed out'\n        });\n      }; // XDomainRequest does not allow setting custom headers\n      // If EventSource has enabled the use of GET arguments\n      // we add parameters to URL so that server can adapt the stream...\n\n\n      var reqGetArgs = {};\n\n      if (evs.getArgs) {\n        // copy evs.getArgs in reqGetArgs\n        var defaultArgs = evs.getArgs;\n\n        for (var key in defaultArgs) {\n          if (defaultArgs.hasOwnProperty(key)) {\n            reqGetArgs[key] = defaultArgs[key];\n          }\n        }\n\n        if (evs.lastEventId) {\n          reqGetArgs.evs_last_event_id = evs.lastEventId;\n        }\n      } // send the request\n\n\n      request.open('GET', evs.urlWithParams(evs.URL, reqGetArgs));\n      request.send();\n    };\n\n    EventSource.prototype.XHR.prototype = {\n      useXDomainRequest: true,\n      _request: null,\n      _ready: false,\n      // true when progress events are dispatched\n      _loaded: false,\n      // true when request has been loaded\n      _failed: false,\n      // true if when request is in error\n      isReady: function () {\n        return this._request._ready;\n      },\n      isDone: function () {\n        return this._request._loaded;\n      },\n      hasError: function () {\n        return this._request._failed;\n      },\n      getBuffer: function () {\n        var rv = '';\n\n        try {\n          rv = this._request.responseText || '';\n        } catch (err) {// intentional noop\n        }\n\n        return rv;\n      },\n      abort: function () {\n        if (this._request) {\n          this._request.abort();\n        }\n      }\n    };\n  } else {\n    EventSource.isPolyfill = 'XHR'; // EventSource will send request using XMLHttpRequest\n\n    EventSource.prototype.XHR = function (evs) {\n      var request = new XMLHttpRequest();\n      this._request = request;\n      evs._xhr = this; // set handlers\n\n      request.onreadystatechange = function () {\n        if (request.readyState > 1 && evs.readyState != evs.CLOSED) {\n          if (request.status == 200 || request.status >= 300 && request.status < 400) {\n            evs._onxhrdata();\n          } else {\n            request._failed = true;\n            evs.readyState = evs.CLOSED;\n            evs.dispatchEvent('error', {\n              type: 'error',\n              data: 'The server responded with ' + request.status\n            });\n            evs.close();\n          }\n        }\n      };\n\n      request.onprogress = function () {// intentional noop\n      };\n\n      request.open('GET', evs.urlWithParams(evs.URL, evs.getArgs), true);\n      var headers = evs.xhrHeaders; // maybe null\n\n      for (var header in headers) {\n        if (headers.hasOwnProperty(header)) {\n          request.setRequestHeader(header, headers[header]);\n        }\n      }\n\n      if (evs.lastEventId) {\n        request.setRequestHeader('Last-Event-Id', evs.lastEventId);\n      }\n\n      request.send();\n    };\n\n    EventSource.prototype.XHR.prototype = {\n      useXDomainRequest: false,\n      _request: null,\n      _failed: false,\n      // true if we have had errors...\n      isReady: function () {\n        return this._request.readyState >= 2;\n      },\n      isDone: function () {\n        return this._request.readyState == 4;\n      },\n      hasError: function () {\n        return this._failed || this._request.status >= 400;\n      },\n      getBuffer: function () {\n        var rv = '';\n\n        try {\n          rv = this._request.responseText || '';\n        } catch (err) {// intentional noop\n        }\n\n        return rv;\n      },\n      abort: function () {\n        if (this._request) {\n          this._request.abort();\n        }\n      }\n    };\n  }\n\n  function MessageEvent(type, data, origin, lastEventId) {\n    this.bubbles = false;\n    this.cancelBubble = false;\n    this.cancelable = false;\n    this.data = data || null;\n    this.origin = origin || '';\n    this.lastEventId = lastEventId || '';\n    this.type = type || 'message';\n  }\n\n  function isOldIE() {\n    //return true if we are in IE8 or IE9\n    return Boolean(typeof window !== 'undefined' && window.XDomainRequest && window.XMLHttpRequest && new XMLHttpRequest().responseType === undefined);\n  }\n\n  return EventSource;\n});","map":null,"metadata":{},"sourceType":"script"}