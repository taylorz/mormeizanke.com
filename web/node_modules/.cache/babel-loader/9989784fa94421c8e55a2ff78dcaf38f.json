{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef, useState, useEffect } from 'react';\nvar warned = false;\nvar Div100vh = forwardRef(function (_a, ref) {\n  var style = _a.style,\n      other = __rest(_a, [\"style\"]);\n\n  var height = use100vh(); // TODO: warn only in development\n\n  if (!warned && (style === null || style === void 0 ? void 0 : style.height)) {\n    warned = true;\n    console.warn('<ReactDiv100vh /> overrides the height property of the style prop');\n  }\n\n  var styleWithRealHeight = __assign(__assign({}, style), {\n    height: height ? height + \"px\" : '100vh'\n  });\n\n  return React.createElement(\"div\", __assign({\n    ref: ref,\n    style: styleWithRealHeight\n  }, other));\n});\nDiv100vh.displayName = 'Div100vh';\nexport default Div100vh;\nexport function use100vh() {\n  var _a = useState(measureHeight),\n      height = _a[0],\n      setHeight = _a[1];\n\n  var wasRenderedOnClientAtLeastOnce = useWasRenderedOnClientAtLeastOnce();\n  useEffect(function () {\n    if (!wasRenderedOnClientAtLeastOnce) return;\n\n    function setMeasuredHeight() {\n      var measuredHeight = measureHeight();\n      setHeight(measuredHeight);\n    }\n\n    window.addEventListener('resize', setMeasuredHeight);\n    return function () {\n      return window.removeEventListener('resize', setMeasuredHeight);\n    };\n  }, [wasRenderedOnClientAtLeastOnce]);\n  return wasRenderedOnClientAtLeastOnce ? height : null;\n}\nexport function measureHeight() {\n  var _a;\n\n  if (!isClient()) return null;\n  return ((_a = document.documentElement) === null || _a === void 0 ? void 0 : _a.clientHeight) || window.innerHeight;\n} // Once we ended up on client, the first render must look the same as on\n// the server so hydration happens without problems. _Then_ we immediately\n// schedule a subsequent update and return the height measured on the client.\n// It's not needed for CSR-only apps, but is critical for SSR.\n\nfunction useWasRenderedOnClientAtLeastOnce() {\n  var _a = useState(false),\n      wasRenderedOnClientAtLeastOnce = _a[0],\n      setWasRenderedOnClientAtLeastOnce = _a[1];\n\n  useEffect(function () {\n    if (isClient()) {\n      setWasRenderedOnClientAtLeastOnce(true);\n    }\n  }, []);\n  return wasRenderedOnClientAtLeastOnce;\n}\n\nfunction isClient() {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}","map":null,"metadata":{},"sourceType":"module"}